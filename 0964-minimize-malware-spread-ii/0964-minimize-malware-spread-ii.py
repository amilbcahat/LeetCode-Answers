class Solution:
    def dfs(self, graph, node, parent, discovery, low, isInfected, malwareSpreadCount, time): 
        low[node] = discovery[node] = time 
        malwareSpread = isInfected[node]
        componentSize = 1
        #For adj nodes 
        for adj in range(len(graph[node])): 
            if graph[node][adj] == 1: 
                if discovery[adj] == 0: 
                    subTreeSize = self.dfs(graph, adj, node, discovery, low, isInfected, malwareSpreadCount, time + 1)

                    if subTreeSize == 0: 
                        malwareSpread = True 
                    else: 
                        componentSize += subTreeSize

                    if low[adj] >= discovery[node]: 
                        malwareSpreadCount[node] += subTreeSize
                    low[node] = min(low[node], low[adj])
                elif adj != parent: 
                    low[node] = min(low[node], discovery[adj])

        return 0 if malwareSpread else componentSize

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        nodeToRemove = initial[0]
        discovery = [0] * n 
        low = [0] * n 
        malwareSpreadCount = [0] * n 
        isInfected = [False] * n 
        maxSavedNodes = 0

        for node in initial: 
            isInfected[node] = True 

        for node in initial: 
            if discovery[node] == 0: 
                self.dfs(graph, node, -1, discovery, low, isInfected, malwareSpreadCount, 1)

            if malwareSpreadCount[node] > maxSavedNodes or ( malwareSpreadCount[node] == maxSavedNodes and node < nodeToRemove):
                maxSavedNodes = malwareSpreadCount[node]
                nodeToRemove = node

        return nodeToRemove
        